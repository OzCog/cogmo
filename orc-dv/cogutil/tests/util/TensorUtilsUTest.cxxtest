/*
 * tests/util/TensorUtilsUTest.cxxtest
 *
 * Foundation Layer: Tensor Utilities Unit Tests
 * Cognitive Function: utility-primitives
 * Tensor Shape: [512, 128, 8] = 524,288 DOF
 *
 * Copyright (C) 2024 by OpenCog Foundation
 * All Rights Reserved
 */

#include <cxxtest/TestSuite.h>
#include <opencog/util/tensor_utils.h>
#include <opencog/util/cogutil.h>

using namespace opencog::util;

class TensorUtilsUTest : public CxxTest::TestSuite
{
public:
    void setUp() {
        // Initialize tensor allocator
        TensorAllocator::initializeMemoryPool();
    }

    void tearDown() {
        TensorAllocator::releasePool();
    }

    // Test tensor shape validation according to Foundation Layer spec
    void test_tensor_shape_validation() {
        // Validate compile-time tensor specifications
        TS_ASSERT_EQUALS(TensorShape3D::X, 512);
        TS_ASSERT_EQUALS(TensorShape3D::Y, 128);
        TS_ASSERT_EQUALS(TensorShape3D::Z, 8);
        TS_ASSERT_EQUALS(TensorShape3D::DOF, 524288);
        
        // Validate tensor DOF calculation
        TS_ASSERT_EQUALS(COGUTIL_DEGREES_OF_FREEDOM, 524288);
        TS_ASSERT_EQUALS(COGUTIL_TENSOR_SHAPE_X * COGUTIL_TENSOR_SHAPE_Y * COGUTIL_TENSOR_SHAPE_Z, 524288);
    }

    void test_tensor_creation_and_validation() {
        auto tensor = TensorUtils::createTensor();
        
        // Test tensor creation
        TS_ASSERT(tensor != nullptr);
        TS_ASSERT(TensorUtils::validateTensorShape(tensor));
        TS_ASSERT_EQUALS(tensor->size(), TensorShape3D::DOF);
        
        // Test initialization
        TensorUtils::initializeTensor(tensor, 1.0f);
        
        // Verify initialization
        for (size_t i = 0; i < TensorShape3D::DOF; ++i) {
            TS_ASSERT_DELTA((*tensor)[i], 1.0f, 1e-6f);
        }
    }

    void test_tensor_arithmetic_operations() {
        auto tensor_a = TensorUtils::createTensor();
        auto tensor_b = TensorUtils::createTensor();
        auto result = TensorUtils::createTensor();
        
        // Initialize test tensors
        TensorUtils::initializeTensor(tensor_a, 2.0f);
        TensorUtils::initializeTensor(tensor_b, 3.0f);
        TensorUtils::initializeTensor(result, 0.0f);
        
        // Test tensor addition
        TensorUtils::tensorAdd(tensor_a, tensor_b, result);
        for (size_t i = 0; i < 100; ++i) { // Sample check
            TS_ASSERT_DELTA((*result)[i], 5.0f, 1e-6f);
        }
        
        // Test tensor multiplication
        TensorUtils::tensorMultiply(tensor_a, tensor_b, result);
        for (size_t i = 0; i < 100; ++i) { // Sample check
            TS_ASSERT_DELTA((*result)[i], 6.0f, 1e-6f);
        }
        
        // Test dot product
        float dot_product = TensorUtils::tensorDotProduct(tensor_a, tensor_b);
        float expected_dot = 2.0f * 3.0f * TensorShape3D::DOF;
        TS_ASSERT_DELTA(dot_product, expected_dot, 1e-3f);
    }

    void test_tensor_normalization() {
        auto tensor = TensorUtils::createTensor();
        
        // Initialize with non-unit vector
        for (size_t i = 0; i < TensorShape3D::DOF; ++i) {
            (*tensor)[i] = static_cast<float>(i % 10 + 1); // Values 1-10
        }
        
        // Normalize tensor
        TensorUtils::tensorNormalize(tensor);
        
        // Verify normalization (L2 norm should be 1.0)
        float norm_squared = 0.0f;
        for (size_t i = 0; i < TensorShape3D::DOF; ++i) {
            norm_squared += (*tensor)[i] * (*tensor)[i];
        }
        TS_ASSERT_DELTA(std::sqrt(norm_squared), 1.0f, 1e-5f);
    }

    void test_recursive_tensor_decomposition() {
        auto tensor = TensorUtils::createTensor();
        TensorUtils::initializeTensor(tensor, 1.0f);
        
        // Test decomposition with depth 2 (4 components)
        auto components = TensorUtils::decomposeTensor(tensor, 2);
        TS_ASSERT_EQUALS(components.size(), 4);
        
        // Each component should be valid
        for (const auto& component : components) {
            TS_ASSERT(TensorUtils::validateTensorShape(component));
        }
        
        // Test composition back to original
        auto recomposed = TensorUtils::composeTensors(components);
        TS_ASSERT(TensorUtils::validateTensorShape(recomposed));
    }

    void test_cognitive_primitives_spatial_operations() {
        auto tensor = TensorUtils::createTensor();
        TensorUtils::initializeTensor(tensor, 1.0f);
        
        // Test spatial transformation
        CognitivePrimitives::spatialTransform(tensor, 0.1f, 0.2f, 0.3f);
        
        // Verify transformation applied (values should have changed)
        bool has_changed = false;
        for (size_t i = 0; i < 100; ++i) {
            if (std::abs((*tensor)[i] - 1.0f) > 1e-6f) {
                has_changed = true;
                break;
            }
        }
        TS_ASSERT(has_changed);
        
        // Test spatial coordinate extraction
        auto coords = CognitivePrimitives::extractSpatialCoordinates(tensor, 1000);
        TS_ASSERT(coords[0] >= 0.0f && coords[0] < TensorShape3D::X);
        TS_ASSERT(coords[1] >= 0.0f && coords[1] < TensorShape3D::Y);
        TS_ASSERT(coords[2] >= 0.0f && coords[2] < TensorShape3D::Z);
    }

    void test_cognitive_primitives_semantic_operations() {
        auto tensor_a = TensorUtils::createTensor();
        auto tensor_b = TensorUtils::createTensor();
        
        // Initialize with different patterns
        for (size_t i = 0; i < TensorShape3D::DOF; ++i) {
            (*tensor_a)[i] = std::sin(static_cast<float>(i) * 0.01f);
            (*tensor_b)[i] = std::cos(static_cast<float>(i) * 0.01f);
        }
        
        // Test semantic similarity
        float similarity = CognitivePrimitives::semanticSimilarity(tensor_a, tensor_b);
        TS_ASSERT(similarity >= -1.0f && similarity <= 1.0f);
        
        // Test self-similarity (should be 1.0)
        float self_similarity = CognitivePrimitives::semanticSimilarity(tensor_a, tensor_a);
        TS_ASSERT_DELTA(self_similarity, 1.0f, 1e-5f);
    }

    void test_recursive_cognitive_operations() {
        auto tensor = TensorUtils::createTensor();
        
        // Initialize with pattern
        for (size_t i = 0; i < TensorShape3D::DOF; ++i) {
            (*tensor)[i] = static_cast<float>(i % 100) / 100.0f;
        }
        
        // Test recursive cognitive fold
        auto original_copy = TensorUtils::createTensor();
        *original_copy = *tensor; // Copy for comparison
        
        CognitivePrimitives::recursiveCognitiveFold(tensor, 3);
        
        // Verify folding happened (values should be different)
        bool has_folded = false;
        for (size_t i = 0; i < 100; ++i) {
            if (std::abs((*tensor)[i] - (*original_copy)[i]) > 1e-6f) {
                has_folded = true;
                break;
            }
        }
        TS_ASSERT(has_folded);
        
        // Test recursive expansion
        auto expanded = CognitivePrimitives::recursiveCognitiveExpand(tensor, 2);
        TS_ASSERT(TensorUtils::validateTensorShape(expanded));
    }

    void test_parallel_tensor_operations() {
        auto tensor = TensorUtils::createTensor();
        TensorUtils::initializeTensor(tensor, 0.0f);
        
        // Test parallel operation (set each element to its index)
        TensorUtils::parallelTensorOperation(tensor, 
            [](float& value, size_t index) {
                value = static_cast<float>(index);
            });
        
        // Verify parallel operation worked
        for (size_t i = 0; i < 100; ++i) {
            TS_ASSERT_DELTA((*tensor)[i], static_cast<float>(i), 1e-6f);
        }
    }

    void test_tensor_performance_validation() {
        auto tensor = TensorUtils::createTensor();
        TensorUtils::initializeTensor(tensor, 1.0f);
        
        // Test performance validation
        bool performance_ok = TensorUtils::validateTensorPerformance(tensor);
        TS_ASSERT(performance_ok);
        
        // Test operation timing
        double time_ms = TensorUtils::measureTensorOperationTime([&]() {
            TensorUtils::tensorNormalize(tensor);
        });
        
        // Should complete normalization in reasonable time (< 100ms)
        TS_ASSERT_LESS_THAN(time_ms, 100.0);
    }

    void test_memory_allocator() {
        // Test aligned allocation
        size_t alignment = TensorAllocator::getOptimalAlignment();
        TS_ASSERT_EQUALS(alignment, 32); // AVX2 alignment
        
        void* ptr = TensorAllocator::allocateAligned(1024, alignment);
        TS_ASSERT(ptr != nullptr);
        TS_ASSERT_EQUALS(reinterpret_cast<uintptr_t>(ptr) % alignment, 0);
        
        TensorAllocator::deallocateAligned(ptr);
        
        // Test pool allocation
        void* pool_ptr = TensorAllocator::allocateFromPool(512);
        TS_ASSERT(pool_ptr != nullptr);
    }

    void test_cognitive_function_specification() {
        // Validate cognitive function as per Foundation Layer spec
        TS_ASSERT_EQUALS(std::string(COGNITIVE_FUNCTION), "utility-primitives");
        
        // Verify tensor memory footprint
        size_t expected_footprint = TensorShape3D::DOF * sizeof(float);
        TS_ASSERT_EQUALS(TensorUtils::getTensorMemoryFootprint(), expected_footprint);
        TS_ASSERT_EQUALS(expected_footprint, 524288 * sizeof(float));
    }
};