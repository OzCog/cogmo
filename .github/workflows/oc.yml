version: 2.1

# OpenCog Central Consolidated CircleCI Configuration
# This configuration orchestrates the build of all OpenCog components
# in proper dependency order for the entire ecosystem.

# Common configuration
common: &common_config
  docker:
    - image: $CIRCLE_PROJECT_USERNAME/opencog-deps
      user: root
      environment:
        CCACHE_DIR: /ws/ccache
  working_directory: /ws

# PostgreSQL service for components that need it
postgres_service: &postgres_service
  - image: $CIRCLE_PROJECT_USERNAME/postgres
    name: opencog-postgres

jobs:
  # =================================================================
  # Foundation Layer - Core utilities
  # =================================================================
  
  cogutil:
    <<: *common_config
    working_directory: /ws/cogutil
    steps:
      - run:
          name: Start restoring ccache
          command: date +%d-%m-%Y > /tmp/date
      - restore_cache:
          keys:
            - ccache-{{ checksum "/tmp/date" }}
            - ccache-
      - checkout
      - run:
          name: Set number of make jobs
          command: echo "export MAKEFLAGS=-j2" >> $BASH_ENV
      - run:
          name: CMake Configure
          command: mkdir build && cd build && cmake ..
      - run:
          name: Build
          command: cd build && make
      - run:
          name: Build tests
          command: cd build && make tests
      - run:
          name: Run tests
          command: cd build && make check ARGS="$MAKEFLAGS"
      - run:
          name: Install CogUtil
          command: cd build && make install && ldconfig
      - run:
          name: Print test log
          command: cat build/tests/Testing/Temporary/LastTest.log
          when: always
      - persist_to_workspace:
          root: /ws/
          paths:
            - cogutil
            - ccache

  # =================================================================
  # Core Layer - AtomSpace and extensions
  # =================================================================
  
  atomspace:
    docker:
      - image: $CIRCLE_PROJECT_USERNAME/opencog-deps
        user: root
        environment:
          PGHOST: opencog-postgres
          PGUSER: opencog_test
          PGPASSWORD: cheese
          CCACHE_DIR: /ws/ccache
      - <<: *postgres_service
    working_directory: /ws/atomspace
    steps:
      - attach_workspace:
          at: /ws
      - checkout
      - restore_cache:
          name: Restore GHC Cache
          keys:
            - ghc-{{checksum "/ws/atomspace/opencog/haskell/stack.yaml"}}-{{ arch }}
      - restore_cache:
          name: Restore Haskell Deps Cache
          keys:
            - haskelldeps-{{checksum "/ws/atomspace/opencog/haskell/stack.yaml"}}-{{checksum "/ws/atomspace/opencog/haskell/opencog-atomspace.cabal"}}-{{ arch }}
      - run:
          name: Install CogUtil
          command: cd /ws/cogutil/build && make install && ldconfig
      - run:
          name: CMake Configure
          command: mkdir build && cd build && cmake ..
      - run:
          name: Build
          command: cd build && make -j2
      - run:
          name: Build tests
          command: cd build && make -j2 tests
      - run:
          name: Run tests
          command: cd build && make check
      - run:
          name: Install AtomSpace
          command: cd build && make install && ldconfig
      - run:
          name: Build examples
          command: cd build && make -j2 examples
      - run:
          name: Print test log
          command: cat build/tests/Testing/Temporary/LastTest.log
          when: always
      - save_cache:
          name: Save GHC Cache
          key: ghc-{{checksum "/ws/atomspace/opencog/haskell/stack.yaml"}}-{{ arch }}
          paths:
            - /root/.stack
      - save_cache:
          name: Save Haskell Deps Cache
          key: haskelldeps-{{checksum "/ws/atomspace/opencog/haskell/stack.yaml"}}-{{checksum "/ws/atomspace/opencog/haskell/opencog-atomspace.cabal"}}-{{ arch }}
          paths:
            - /ws/atomspace/opencog/haskell/.stack-work
      - persist_to_workspace:
          root: /ws/
          paths:
            - atomspace
            - ccache

  atomspace-rocks:
    <<: *common_config
    working_directory: /ws/atomspace-rocks
    steps:
      - attach_workspace:
          at: /ws/
      - run:
          name: Install CogUtil
          command: cd /ws/cogutil/build && make -j2 install && ldconfig
      - run:
          name: Install AtomSpace
          command: cd /ws/atomspace/build && make -j2 install && ldconfig
      - run:
          name: Checkout AtomSpace-Rocks
          command: git clone --depth 1 https://github.com/$CIRCLE_PROJECT_USERNAME/atomspace-rocks .
      - run:
          name: CMake Configure
          command: mkdir build && cd build && cmake ..
      - run:
          name: Build
          command: cd build && make -j2
      - run:
          name: Build tests
          command: cd build && make -j2 tests
      - run:
          name: Run tests
          command: cd build && make check
      - run:
          name: Install AtomSpace-Rocks
          command: cd build && make -j2 install && ldconfig
      - run:
          name: Print test log
          command: cat build/tests/Testing/Temporary/LastTest.log
          when: always
      - persist_to_workspace:
          root: /ws/
          paths:
            - atomspace-rocks

  atomspace-restful:
    <<: *common_config
    working_directory: /ws/atomspace-restful
    steps:
      - attach_workspace:
          at: /ws/
      - run:
          name: Install CogUtil
          command: cd /ws/cogutil/build && make -j2 install && ldconfig
      - run:
          name: Install AtomSpace
          command: cd /ws/atomspace/build && make -j2 install && ldconfig
      - run:
          name: Checkout AtomSpace-RESTful
          command: git clone --depth 1 https://github.com/$CIRCLE_PROJECT_USERNAME/atomspace-restful .
      - run:
          name: CMake Configure
          command: mkdir build && cd build && cmake ..
      - run:
          name: Build
          command: cd build && make -j2
      - run:
          name: Build tests
          command: cd build && make -j2 tests
      - run:
          name: Run tests
          command: cd build && make check
      - run:
          name: Install AtomSpace-RESTful
          command: cd build && make -j2 install && ldconfig
      - run:
          name: Print test log
          command: cat build/tests/Testing/Temporary/LastTest.log
          when: always
      - persist_to_workspace:
          root: /ws/
          paths:
            - atomspace-restful

  # =================================================================
  # Logic Layer - Unification and reasoning
  # =================================================================
  
  unify:
    <<: *common_config
    working_directory: /ws/unify
    steps:
      - attach_workspace:
          at: /ws/
      - run:
          name: Install CogUtil
          command: cd /ws/cogutil/build && make -j2 install && ldconfig
      - run:
          name: Install AtomSpace
          command: cd /ws/atomspace/build && make -j2 install && ldconfig
      - run:
          name: Checkout Unify
          command: git clone --depth 1 https://github.com/$CIRCLE_PROJECT_USERNAME/unify .
      - run:
          name: CMake Configure
          command: mkdir build && cd build && cmake ..
      - run:
          name: Build
          command: cd build && make -j2
      - run:
          name: Build tests
          command: cd build && make -j2 tests
      - run:
          name: Run tests
          command: cd build && make -j2 check ARGS=-j2
      - run:
          name: Install Unify
          command: cd build && make -j2 install && ldconfig
      - run:
          name: Print test log
          command: cat build/tests/Testing/Temporary/LastTest.log
          when: always
      - persist_to_workspace:
          root: /ws/
          paths:
            - unify

  ure:
    <<: *common_config
    working_directory: /ws/ure
    steps:
      - attach_workspace:
          at: /ws/
      - run:
          name: Install CogUtil
          command: cd /ws/cogutil/build && make -j2 install && ldconfig
      - run:
          name: Install AtomSpace
          command: cd /ws/atomspace/build && make -j2 install && ldconfig
      - run:
          name: Install Unify
          command: cd /ws/unify/build && make -j2 install && ldconfig
      - run:
          name: Checkout URE
          command: git clone --depth 1 https://github.com/$CIRCLE_PROJECT_USERNAME/ure .
      - run:
          name: CMake Configure
          command: mkdir build && cd build && cmake ..
      - run:
          name: Build
          command: cd build && make -j2
      - run:
          name: Build tests
          command: cd build && make -j2 tests
      - run:
          name: Run tests
          command: cd build && make -j2 check ARGS=-j2
      - run:
          name: Install URE
          command: cd build && make -j2 install && ldconfig
      - run:
          name: Print test log
          command: cat build/tests/Testing/Temporary/LastTest.log
          when: always
      - persist_to_workspace:
          root: /ws/
          paths:
            - ure

  # =================================================================
  # Cognitive Systems Layer
  # =================================================================
  
  cogserver:
    <<: *common_config
    working_directory: /ws/cogserver
    steps:
      - attach_workspace:
          at: /ws
      - run:
          name: Set number of make jobs
          command: echo "export MAKEFLAGS=-j2" >> $BASH_ENV
      - run:
          name: Install CogUtil
          command: cd /ws/cogutil/build && make -j2 install && ldconfig
      - run:
          name: Install AtomSpace
          command: cd /ws/atomspace/build && make install && ldconfig
      - run:
          name: Checkout CogServer
          command: git clone --depth 1 https://github.com/$CIRCLE_PROJECT_USERNAME/cogserver .
      - run:
          name: CMake Configure
          command: mkdir build && cd build && cmake ..
      - run:
          name: Build
          command: cd build && make
      - run:
          name: Build tests
          command: cd build && make tests
      - run:
          name: Install CogServer
          command: cd build && make install && ldconfig
      - persist_to_workspace:
          root: /ws/
          paths:
            - cogserver
            - ccache

  attention:
    <<: *common_config
    working_directory: /ws/attention
    steps:
      - attach_workspace:
          at: /ws
      - run:
          name: Set number of make jobs
          command: echo "export MAKEFLAGS=-j2" >> $BASH_ENV
      - run:
          name: Install CogUtil
          command: cd /ws/cogutil/build && make install && ldconfig
      - run:
          name: Install AtomSpace
          command: cd /ws/atomspace/build && make install && ldconfig
      - run:
          name: Install CogServer
          command: cd /ws/cogserver/build && make install && ldconfig
      - run:
          name: Checkout Attention
          command: git clone --depth 1 https://github.com/$CIRCLE_PROJECT_USERNAME/attention .
      - run:
          name: CMake Configure
          command: mkdir build && cd build && cmake ..
      - run:
          name: Build
          command: cd build && make
      - run:
          name: Build tests
          command: cd build && make tests
      - run:
          name: Run tests
          command: cd build && make check ARGS="$MAKEFLAGS"
      - run:
          name: Install Attention
          command: cd build && make install && ldconfig
      - run:
          name: Print test log
          command: cat build/tests/Testing/Temporary/LastTest.log
          when: always
      - persist_to_workspace:
          root: /ws/
          paths:
            - attention
            - ccache

  spacetime:
    <<: *common_config
    working_directory: /ws/spacetime
    steps:
      - attach_workspace:
          at: /ws/
      - run:
          name: Install CogUtil
          command: cd /ws/cogutil/build && make -j2 install && ldconfig
      - run:
          name: Install AtomSpace
          command: cd /ws/atomspace/build && make -j2 install && ldconfig
      - run:
          name: Checkout SpaceTime
          command: git clone --depth 1 https://github.com/$CIRCLE_PROJECT_USERNAME/spacetime .
      - run:
          name: CMake Configure
          command: mkdir build && cd build && cmake ..
      - run:
          name: Build
          command: cd build && make -j2
      - run:
          name: Build tests
          command: cd build && make -j2 tests
      - run:
          name: Run tests
          command: cd build && make -j2 check ARGS=-j2
      - run:
          name: Install SpaceTime
          command: cd build && make -j2 install && ldconfig
      - run:
          name: Print test log
          command: cat build/tests/Testing/Temporary/LastTest.log
          when: always
      - persist_to_workspace:
          root: /ws/
          paths:
            - spacetime

  # =================================================================
  # Advanced Systems Layer
  # =================================================================
  
  pln:
    <<: *common_config
    working_directory: /ws/pln
    steps:
      - attach_workspace:
          at: /ws/
      - run:
          name: Install CogUtil
          command: cd /ws/cogutil/build && make -j2 install && ldconfig
      - run:
          name: Install AtomSpace
          command: cd /ws/atomspace/build && make -j2 install && ldconfig
      - run:
          name: Install Unify
          command: cd /ws/unify/build && make -j2 install && ldconfig
      - run:
          name: Install URE
          command: cd /ws/ure/build && make -j2 install && ldconfig
      - run:
          name: Install SpaceTime
          command: cd /ws/spacetime/build && make -j2 install && ldconfig
      - run:
          name: Checkout PLN
          command: git clone --depth 1 https://github.com/$CIRCLE_PROJECT_USERNAME/pln .
      - run:
          name: CMake Configure
          command: mkdir build && cd build && cmake ..
      - run:
          name: Build
          command: cd build && make -j2
      - run:
          name: Install PLN
          command: cd build && make -j2 install && ldconfig
      - run:
          name: Build tests
          command: cd build && make -j2 tests
      - run:
          name: Run tests
          command: cd build && make -j2 check ARGS=-j2
      - run:
          name: Print test log
          command: cat build/tests/Testing/Temporary/LastTest.log
          when: always
      - persist_to_workspace:
          root: /ws/
          paths:
            - pln

  miner:
    <<: *common_config
    working_directory: /ws/miner
    steps:
      - attach_workspace:
          at: /ws/
      - restore_cache:
          name: Restore GHC Cache
          keys:
            - ghc-{{checksum "/ws/atomspace/opencog/haskell/stack.yaml"}}-{{ arch }}
      - restore_cache:
          name: Restore Haskell Deps Cache
          keys:
            - haskelldeps-{{checksum "/ws/atomspace/opencog/haskell/stack.yaml"}}-{{checksum "/ws/atomspace/opencog/haskell/opencog-atomspace.cabal"}}-{{ arch }}
      - run:
          name: Install CogUtil
          command: cd /ws/cogutil/build && make -j2 install && ldconfig
      - run:
          name: Install AtomSpace
          command: cd /ws/atomspace/build && make -j2 install && ldconfig
      - run:
          name: Install Unify
          command: cd /ws/unify/build && make -j2 install && ldconfig
      - run:
          name: Install URE
          command: cd /ws/ure/build && make -j2 install && ldconfig
      - run:
          name: Checkout Miner
          command: git clone --depth 1 https://github.com/$CIRCLE_PROJECT_USERNAME/miner .
      - run:
          name: CMake Configure
          command: mkdir build && cd build && cmake ..
      - run:
          name: Build
          command: cd build && make -j2
      - run:
          name: Build tests
          command: cd build && make -j2 tests
      - run:
          name: Run tests
          command: cd build && make -j2 check ARGS=-j2
      - run:
          name: Install Miner
          command: cd build && make -j2 install && ldconfig
      - run:
          name: Print test log
          command: cat build/tests/Testing/Temporary/LastTest.log
          when: always
      - persist_to_workspace:
          root: /ws/
          paths:
            - miner
            - ccache

  # =================================================================
  # Learning Systems Layer
  # =================================================================
  
  moses:
    <<: *common_config
    working_directory: /ws/moses
    steps:
      - attach_workspace:
          at: /ws/
      - run:
          name: Install CogUtil
          command: cd /ws/cogutil/build && make -j2 install && ldconfig
      - run:
          name: Checkout MOSES
          command: git clone --depth 1 https://github.com/$CIRCLE_PROJECT_USERNAME/moses .
      - run:
          name: CMake Configure
          command: mkdir build && cd build && cmake ..
      - run:
          name: Build
          command: cd build && make -j2
      - run:
          name: Build tests
          command: cd build && make -j2 tests
      - run:
          name: Run tests
          command: cd build && make -j2 check
      - run:
          name: Install MOSES
          command: cd build && make -j2 install && ldconfig
      - run:
          name: Print test log
          command: cat build/tests/Testing/Temporary/LastTest.log
          when: always
      - persist_to_workspace:
          root: /ws/
          paths:
            - moses

  asmoses:
    <<: *common_config
    working_directory: /ws/asmoses
    steps:
      - attach_workspace:
          at: /ws
      - run:
          name: Set number of make jobs
          command: echo "export MAKEFLAGS=-j2" >> $BASH_ENV
      - run:
          name: Install CogUtil
          command: cd /ws/cogutil/build && make install && ldconfig
      - run:
          name: Install AtomSpace
          command: cd /ws/atomspace/build && make install && ldconfig
      - run:
          name: Install Unify
          command: cd /ws/unify/build && make install && ldconfig
      - run:
          name: Install URE
          command: cd /ws/ure/build && make install && ldconfig
      - run:
          name: Checkout AS-MOSES
          command: git clone --depth 1 https://github.com/$CIRCLE_PROJECT_USERNAME/asmoses .
      - run:
          name: CMake Configure
          command: mkdir build && cd build && cmake ..
      - run:
          name: Build
          command: cd build && make
      - run:
          name: Install
          command: cd build && make install
      - run:
          name: Build tests
          command: cd build && make tests
      - run:
          name: Run tests
          command: cd build && make check ARGS="$MAKEFLAGS"
      - run:
          name: Print test log
          command: cat build/tests/Testing/Temporary/LastTest.log
          when: always
      - persist_to_workspace:
          root: /ws/
          paths:
            - asmoses

  # =================================================================
  # Language Processing Layer
  # =================================================================
  
  lg-atomese:
    <<: *common_config
    working_directory: /ws/lg-atomese
    steps:
      - attach_workspace:
          at: /ws/
      - run:
          name: Install CogUtil
          command: cd /ws/cogutil/build && make -j2 install && ldconfig
      - run:
          name: Install AtomSpace
          command: cd /ws/atomspace/build && make -j2 install && ldconfig
      - run:
          name: Checkout LG-AtomESE
          command: git clone --depth 1 https://github.com/$CIRCLE_PROJECT_USERNAME/lg-atomese .
      - run:
          name: CMake Configure
          command: mkdir build && cd build && cmake ..
      - run:
          name: Build
          command: cd build && make -j2
      - run:
          name: Build tests
          command: cd build && make -j2 tests
      - run:
          name: Run tests
          command: cd build && make -j2 check
      - run:
          name: Install LG-AtomESE
          command: cd build && make -j2 install && ldconfig
      - run:
          name: Print test log
          command: cat build/tests/Testing/Temporary/LastTest.log
          when: always
      - persist_to_workspace:
          root: /ws/
          paths:
            - lg-atomese

  learn:
    <<: *common_config
    working_directory: /ws/learn
    steps:
      - attach_workspace:
          at: /ws/
      - run:
          name: Install CogUtil
          command: cd /ws/cogutil/build && make -j2 install && ldconfig
      - run:
          name: Install AtomSpace
          command: cd /ws/atomspace/build && make -j2 install && ldconfig
      - run:
          name: Install CogServer
          command: cd /ws/cogserver/build && make -j2 install && ldconfig
      - run:
          name: Checkout Learn
          command: git clone --depth 1 https://github.com/$CIRCLE_PROJECT_USERNAME/learn .
      - run:
          name: CMake Configure
          command: mkdir build && cd build && cmake ..
      - run:
          name: Build
          command: cd build && make -j2
      - run:
          name: Install Learn
          command: cd build && make -j2 install && ldconfig
      - persist_to_workspace:
          root: /ws/
          paths:
            - learn

  language-learning:
    <<: *common_config
    working_directory: /ws/language-learning
    steps:
      - attach_workspace:
          at: /ws/
      - run:
          name: Checkout Language Learning
          command: git clone --depth 1 https://github.com/$CIRCLE_PROJECT_USERNAME/language-learning .
      - run:
          name: Build Language Learning
          command: echo "Language learning build placeholder"
      - persist_to_workspace:
          root: /ws/
          paths:
            - language-learning

  # =================================================================
  # Integration Layer - Main OpenCog
  # =================================================================
  
  opencog:
    <<: *common_config
    working_directory: /ws/opencog
    steps:
      - attach_workspace:
          at: /ws
      - restore_cache:
          name: Restore GHC Cache
          keys:
            - ghc-{{checksum "/ws/atomspace/opencog/haskell/stack.yaml"}}-{{ arch }}
      - restore_cache:
          name: Restore Haskell Deps Cache
          keys:
            - haskelldeps-{{checksum "/ws/atomspace/opencog/haskell/stack.yaml"}}-{{checksum "/ws/atomspace/opencog/haskell/opencog-atomspace.cabal"}}-{{ arch }}
      - run:
          name: Set number of make jobs
          command: echo "export MAKEFLAGS=-j2" >> $BASH_ENV
      - run:
          name: Install CogUtil
          command: cd /ws/cogutil/build && make install && ldconfig
      - run:
          name: Install AtomSpace
          command: cd /ws/atomspace/build && make install && ldconfig
      - run:
          name: Install CogServer
          command: cd /ws/cogserver/build && make install && ldconfig
      - run:
          name: Install Attention
          command: cd /ws/attention/build && make install && ldconfig
      - run:
          name: Install Unify
          command: cd /ws/unify/build && make install && ldconfig
      - run:
          name: Install URE
          command: cd /ws/ure/build && make install && ldconfig
      - run:
          name: Install Link Grammar Atomese
          command: cd /ws/lg-atomese/build && make install && ldconfig
      - run:
          name: Checkout OpenCog
          command: git clone --depth 1 https://github.com/$CIRCLE_PROJECT_USERNAME/opencog .
      - run:
          name: CMake Configure
          command: mkdir build && cd build && cmake ..
      - run:
          name: Build
          command: cd build && make
      - run:
          name: Build tests
          command: cd build && make tests
      - run:
          name: Run tests
          command: cd build && make check ARGS="$MAKEFLAGS"
      - run:
          name: Install OpenCog
          command: cd build && make install && ldconfig
      - run:
          name: Print test log
          command: cat build/tests/Testing/Temporary/LastTest.log
          when: always
      - persist_to_workspace:
          root: /ws/
          paths:
            - opencog
            - ccache

  # =================================================================
  # Packaging and Deployment
  # =================================================================
  
  package:
    <<: *common_config
    working_directory: /ws/cogutil
    steps:
      - attach_workspace:
          at: /ws/
      - run:
          name: Build Debian package
          command: cd build && make install && make package
      - store_artifacts:
          path: build/packages/
      - run:
          name: Start storing ccache
          command: date +%d-%m-%Y > /tmp/date
      - save_cache:
          key: ccache-{{ checksum "/tmp/date" }}
          paths:
            - /ws/ccache

# =================================================================
# Workflows - Orchestration of the build pipeline
# =================================================================

workflows:
  version: 2
  opencog-ecosystem-build:
    jobs:
      # Foundation Layer
      - cogutil
      
      # Core Layer
      - atomspace:
          requires:
            - cogutil
      - atomspace-rocks:
          requires:
            - atomspace
      - atomspace-restful:
          requires:
            - atomspace
      
      # Logic Layer
      - unify:
          requires:
            - atomspace
      - ure:
          requires:
            - atomspace
            - unify
      
      # Cognitive Systems Layer
      - cogserver:
          requires:
            - atomspace
      - attention:
          requires:
            - atomspace
            - cogserver
      - spacetime:
          requires:
            - atomspace
      
      # Advanced Systems Layer
      - pln:
          requires:
            - atomspace
            - ure
            - spacetime
      - miner:
          requires:
            - atomspace
            - ure
      
      # Learning Systems Layer
      - moses:
          requires:
            - cogutil
      - asmoses:
          requires:
            - atomspace
            - ure
      
      # Language Processing Layer
      - lg-atomese:
          requires:
            - atomspace
      - learn:
          requires:
            - atomspace
            - cogserver
      - language-learning:
          requires:
            - cogutil
      
      # Integration Layer
      - opencog:
          requires:
            - atomspace
            - cogserver
            - attention
            - ure
            - lg-atomese
      
      # Packaging
      - package:
          requires:
            - opencog
          filters:
            branches:
              only: master
