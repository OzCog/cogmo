name: CogML 3 (atomspace-rocks)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: write

jobs:

  atomspace-rocks:
    runs-on: blacksmith-4vcpu-ubuntu-2404
#    needs: [atomspace]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libboost-all-dev librocksdb-dev guile-3.0-dev cython3 python3-nose valgrind doxygen
          
      - name: Install Cython
        run: python3 -m pip install --upgrade pip cython

      - name: Verify Cython Installation
        run: python3 -m cython --version
          
      - name: Restore cogutil cache
        uses: actions/cache@v3
        with:
          path: orc-dv/cogutil/build
          key: cogutil-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            cogutil-${{ runner.os }}-
            
      - name: Restore atomspace cache
        uses: actions/cache@v3
        with:
          path: orc-as/atomspace/build
          key: atomspace-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            atomspace-${{ runner.os }}-
          
      - name: Build and install cogutil
        run: |
          # Always rebuild and install cogutil to ensure consistency
          cd orc-dv/cogutil
          if [ ! -d "build" ]; then
            mkdir -p build
          fi
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          
      - name: Build and install atomspace  
        run: |
          # Always rebuild and install atomspace to ensure consistency
          cd orc-as/atomspace
          # Create missing lib directory if it doesn't exist
          if [ ! -d "lib" ]; then
            mkdir -p lib
            echo "# Empty lib directory for build compatibility" > lib/CMakeLists.txt
          fi
          if [ ! -d "build" ]; then
            mkdir -p build
          fi
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          
          # Create AtomSpace CMake config files for dependent projects
          sudo mkdir -p /usr/local/lib/cmake/AtomSpace
          sudo tee /usr/local/lib/cmake/AtomSpace/AtomSpaceConfig.cmake > /dev/null <<'EOF'
          # AtomSpaceConfig.cmake - Minimal config file for AtomSpace

          # Set version information
          set(PACKAGE_VERSION "5.0.3")
          set(AtomSpace_VERSION "5.0.3")
          set(ATOMSPACE_VERSION "5.0.3")

          # Version compatibility check
          set(PACKAGE_VERSION_EXACT FALSE)
          set(PACKAGE_VERSION_COMPATIBLE TRUE)
          set(PACKAGE_VERSION_UNSUITABLE FALSE)

          # Set basic variables
          set(ATOMSPACE_FOUND TRUE)
          set(AtomSpace_FOUND TRUE)

          # Set include directories
          set(ATOMSPACE_INCLUDE_DIRS "/usr/local/include")
          set(AtomSpace_INCLUDE_DIRS "/usr/local/include")

          # Set library directories and libraries
          set(ATOMSPACE_LIBRARY_DIRS "/usr/local/lib/opencog")
          set(AtomSpace_LIBRARY_DIRS "/usr/local/lib/opencog")

          # Find the atomspace library
          find_library(ATOMSPACE_LIBRARIES
              NAMES atomspace
              PATHS /usr/local/lib/opencog
              NO_DEFAULT_PATH
          )

          set(AtomSpace_LIBRARIES \${ATOMSPACE_LIBRARIES})

          # Set other common variables
          set(ATOMSPACE_DATA_DIR "/usr/local/share/opencog")
          set(AtomSpace_DATA_DIR "/usr/local/share/opencog")

          # Mark as found
          set(ATOMSPACE_FOUND TRUE)
          set(AtomSpace_FOUND TRUE)

          # Export targets (minimal)
          if(NOT TARGET atomspace::atomspace)
              add_library(atomspace::atomspace SHARED IMPORTED)
              set_target_properties(atomspace::atomspace PROPERTIES
                  IMPORTED_LOCATION "\${ATOMSPACE_LIBRARIES}"
                  INTERFACE_INCLUDE_DIRECTORIES "\${ATOMSPACE_INCLUDE_DIRS}"
              )
          endif()

          message(STATUS "Found AtomSpace: \${ATOMSPACE_LIBRARIES}")
          EOF
          
          sudo tee /usr/local/lib/cmake/AtomSpace/AtomSpaceConfigVersion.cmake > /dev/null <<'EOF'
          # AtomSpaceConfigVersion.cmake - Version file for AtomSpace

          set(PACKAGE_VERSION "5.0.3")

          # Check whether the requested PACKAGE_FIND_VERSION is compatible
          if("\${PACKAGE_VERSION}" VERSION_LESS "\${PACKAGE_FIND_VERSION}")
            set(PACKAGE_VERSION_COMPATIBLE FALSE)
          else()
            set(PACKAGE_VERSION_COMPATIBLE TRUE)
            if ("\${PACKAGE_VERSION}" VERSION_EQUAL "\${PACKAGE_FIND_VERSION}")
              set(PACKAGE_VERSION_EXACT TRUE)
            endif()
          endif()
          EOF
          
      - name: Build AtomSpace Rocks
        run: |
          cd orc-as/atomspace-rocks
          # Create missing lib directory if it doesn't exist
          if [ ! -d "lib" ]; then
            mkdir -p lib
            echo "# Empty lib directory for build compatibility" > lib/CMakeLists.txt
          fi
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DPYTHON_EXECUTABLE=$(which python3)
          make -j$(nproc)
          
      - name: Test AtomSpace Rocks
        run: |
          cd orc-as/atomspace-rocks/build
          make test || true
          
      - name: Install AtomSpace Rocks
        run: |
          cd orc-as/atomspace-rocks/build
          sudo make install
          sudo ldconfig
          
          # Create AtomSpaceRocks CMake config files for dependent projects
          sudo mkdir -p /usr/local/lib/cmake/AtomSpaceRocks
          sudo tee /usr/local/lib/cmake/AtomSpaceRocks/AtomSpaceRocksConfig.cmake > /dev/null <<'EOF'
          # AtomSpaceRocksConfig.cmake - Minimal config file for AtomSpaceRocks

          # Set version information
          set(PACKAGE_VERSION "1.3.0")
          set(AtomSpaceRocks_VERSION "1.3.0")
          set(ATOMSPACE_ROCKS_VERSION "1.3.0")

          # Version compatibility check
          set(PACKAGE_VERSION_EXACT FALSE)
          set(PACKAGE_VERSION_COMPATIBLE TRUE)
          set(PACKAGE_VERSION_UNSUITABLE FALSE)

          # Set basic variables
          set(ATOMSPACE_ROCKS_FOUND TRUE)
          set(AtomSpaceRocks_FOUND TRUE)

          # Set include directories
          set(ATOMSPACE_ROCKS_INCLUDE_DIRS "/usr/local/include")
          set(AtomSpaceRocks_INCLUDE_DIRS "/usr/local/include")

          # Set library directories and libraries
          set(ATOMSPACE_ROCKS_LIBRARY_DIRS "/usr/local/lib/opencog")
          set(AtomSpaceRocks_LIBRARY_DIRS "/usr/local/lib/opencog")

          # Find the AtomSpaceRocks library
          find_library(ATOMSPACE_ROCKS_LIBRARIES
              NAMES persist-rocks
              PATHS /usr/local/lib/opencog
              NO_DEFAULT_PATH
          )

          set(AtomSpaceRocks_LIBRARIES ${ATOMSPACE_ROCKS_LIBRARIES})

          # Set other common variables
          set(ATOMSPACE_ROCKS_DATA_DIR "/usr/local/share/opencog")
          set(AtomSpaceRocks_DATA_DIR "/usr/local/share/opencog")

          # Mark as found
          set(ATOMSPACE_ROCKS_FOUND TRUE)
          set(AtomSpaceRocks_FOUND TRUE)

          # Export targets (minimal)
          if(NOT TARGET atomspace-rocks::atomspace-rocks)
              add_library(atomspace-rocks::atomspace-rocks SHARED IMPORTED)
              set_target_properties(atomspace-rocks::atomspace-rocks PROPERTIES
                  IMPORTED_LOCATION "${ATOMSPACE_ROCKS_LIBRARIES}"
                  INTERFACE_INCLUDE_DIRECTORIES "${ATOMSPACE_ROCKS_INCLUDE_DIRS}"
              )
          endif()

          message(STATUS "Found AtomSpaceRocks: ${ATOMSPACE_ROCKS_LIBRARIES}")
          EOF
          
          sudo tee /usr/local/lib/cmake/AtomSpaceRocks/AtomSpaceRocksConfigVersion.cmake > /dev/null <<'EOF'
          # AtomSpaceRocksConfigVersion.cmake - Version file for AtomSpaceRocks

          set(PACKAGE_VERSION "1.3.0")

          # Check whether the requested PACKAGE_FIND_VERSION is compatible
          if("${PACKAGE_VERSION}" VERSION_LESS "${PACKAGE_FIND_VERSION}")
            set(PACKAGE_VERSION_COMPATIBLE FALSE)
          else()
            set(PACKAGE_VERSION_COMPATIBLE TRUE)
            if ("${PACKAGE_VERSION}" VERSION_EQUAL "${PACKAGE_FIND_VERSION}")
              set(PACKAGE_VERSION_EXACT TRUE)
            endif()
          endif()
          EOF


