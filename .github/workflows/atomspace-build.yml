---
name: CogML - AtomSpace Build
on:
  workflow_dispatch:
    inputs:
      cogutil_cache_key:
        description: 'Cache key for cogutil dependency'
        required: false
        type: string
      cache_key_suffix:
        description: 'Cache key suffix for dependency builds'
        required: false
        default: 'default'
        type: string
  workflow_call:
    inputs:
      cogutil_cache_key:
        description: 'Cache key for cogutil dependency'
        required: false
        type: string
      cache_key_suffix:
        description: 'Cache key suffix for dependency builds'
        required: false
        default: 'default'
        type: string

permissions:
  contents: read

env:
  COGML_AUTO_FIX_ENABLED: "true"
  COGML_MAX_FIX_ATTEMPTS: "3"
  COGML_ESCALATION_ENABLED: "true"

jobs:
  atomspace:
    runs-on: blacksmith-4vcpu-ubuntu-2404
    outputs:
      cache_key: ${{ steps.cache_info.outputs.key }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set cache info
        id: cache_info
        run: |
          echo "key=atomspace-${{ runner.os }}-${{ github.sha }}-${{ inputs.cache_key_suffix }}" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libboost-all-dev guile-3.0-dev cython3 python3-nose valgrind doxygen

      - name: Restore cogutil cache
        uses: actions/cache@v3
        with:
          path: orc-dv/cogutil/build
          key: ${{ inputs.cogutil_cache_key || format('cogutil-{0}-{1}-{2}', runner.os, github.sha, inputs.cache_key_suffix) }}
          restore-keys: |
            cogutil-${{ runner.os }}-

      - name: Install cogutil
        run: |
          cd orc-dv/cogutil/build
          sudo make install
          sudo ldconfig

      - name: Build AtomSpace with Self-Healing
        run: |
          cd orc-as/atomspace
          # Create missing lib directory if it doesn't exist
          if [ ! -d "lib" ]; then
            mkdir -p lib
            echo "# Empty lib directory for build compatibility" > lib/CMakeLists.txt
          fi
          mkdir -p build && cd build

          # First attempt - try normal build
          if cmake .. -DCMAKE_BUILD_TYPE=Release && make -j$(nproc); then
            echo "✅ AtomSpace build successful on first try!"
          else
            echo "❌ AtomSpace build failed, activating self-healing..."

            # Check if auto-fix is enabled and available
            if [ "$COGML_AUTO_FIX_ENABLED" = "true" ] && [ -f "../../scripts/auto_fix.py" ]; then
              echo "🤖 Running self-healing auto-fix system..."
              cd ../../..

              python3 scripts/auto_fix.py \
                --build-cmd bash -c "cd orc-as/atomspace/build && make -j$(nproc)" \
                --max-attempts $COGML_MAX_FIX_ATTEMPTS \
                --repo-root .

              # Check if fix was successful
              if [ $? -eq 0 ]; then
                echo "✅ Self-healing resolved the build issues!"
              else
                echo "🚨 Self-healing could not resolve issues, manual intervention required"
                exit 1
              fi
            else
              echo "⚠️  Self-healing disabled or unavailable, failing build"
              exit 1
            fi
          fi

      - name: Test AtomSpace
        run: |
          cd orc-as/atomspace/build
          make test || true

      - name: Install AtomSpace
        run: |
          cd orc-as/atomspace/build
          sudo make install
          sudo ldconfig

      - name: Cache atomspace build
        uses: actions/cache@v3
        with:
          path: orc-as/atomspace/build
          key: ${{ steps.cache_info.outputs.key }}

      - name: Create build artifacts summary
        run: |
          echo "## AtomSpace Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "- **Cache Key**: \`${{ steps.cache_info.outputs.key }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Path**: \`orc-as/atomspace/build\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Dependencies**: cogutil (\`${{ inputs.cogutil_cache_key }}\`)" >> $GITHUB_STEP_SUMMARY
          ls -la orc-as/atomspace/build/ >> $GITHUB_STEP_SUMMARY || true