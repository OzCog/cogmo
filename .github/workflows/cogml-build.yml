name: CogML Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: write

jobs:

  # ==== Foundation ====
  cogutil:
    runs-on: blacksmith-4vcpu-ubuntu-2404
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full git history for versioning
      
      - name: Install dependencies
        run: ./.github/scripts/install-deps.sh basic
          
      - name: Build cogutil
        run: |
          cd orc-dv/cogutil
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          
      - name: Test cogutil
        run: |
          cd orc-dv/cogutil/build
          make test || true
          
      - name: Install cogutil
        run: |
          cd orc-dv/cogutil/build
          sudo make install
          sudo ldconfig
          
      - name: Cache cogutil build
        uses: actions/cache@v3
        with:
          path: orc-dv/cogutil/build
          key: cogutil-${{ runner.os }}-${{ github.sha }}

  # ==== Core AtomSpace ====
  atomspace:
    runs-on: blacksmith-4vcpu-ubuntu-2404
    needs: [cogutil]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full git history for versioning
      
      - name: Install dependencies
        run: ./.github/scripts/install-deps.sh guile
          
      - name: Restore cogutil cache
        uses: actions/cache@v3
        with:
          path: orc-dv/cogutil/build
          key: cogutil-${{ runner.os }}-${{ github.sha }}
          
      - name: Install cogutil
        run: |
          cd orc-dv/cogutil/build
          sudo make install
          sudo ldconfig
          
      - name: Build AtomSpace
        run: |
          cd orc-as/atomspace
          # Create missing lib directory if it doesn't exist
          if [ ! -d "lib" ]; then
            mkdir -p lib
            echo "# Empty lib directory for build compatibility" > lib/CMakeLists.txt
          fi
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          
      - name: Test AtomSpace
        run: |
          cd orc-as/atomspace/build
          make test || true
          
      - name: Install AtomSpace
        run: |
          cd orc-as/atomspace/build
          sudo make install
          sudo ldconfig
          
      - name: Cache atomspace build
        uses: actions/cache@v3
        with:
          path: orc-as/atomspace/build
          key: atomspace-${{ runner.os }}-${{ github.sha }}

  atomspace-rocks:
    runs-on: blacksmith-4vcpu-ubuntu-2404
    needs: [atomspace]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: ./.github/scripts/install-deps.sh rocks
          
      - name: Verify Cython Installation
        run: python3 -m cython --version
          
      - name: Restore cogutil cache
        uses: actions/cache@v3
        with:
          path: orc-dv/cogutil/build
          key: cogutil-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            cogutil-${{ runner.os }}-
            
      - name: Restore atomspace cache
        uses: actions/cache@v3
        with:
          path: orc-as/atomspace/build
          key: atomspace-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            atomspace-${{ runner.os }}-
          
      - name: Build and install cogutil
        run: |
          # Always rebuild and install cogutil to ensure consistency
          cd orc-dv/cogutil
          if [ ! -d "build" ]; then
            mkdir -p build
          fi
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          
      - name: Build and install atomspace  
        run: |
          # Always rebuild and install atomspace to ensure consistency
          cd orc-as/atomspace
          # Create missing lib directory if it doesn't exist
          if [ ! -d "lib" ]; then
            mkdir -p lib
            echo "# Empty lib directory for build compatibility" > lib/CMakeLists.txt
          fi
          if [ ! -d "build" ]; then
            mkdir -p build
          fi
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          
          # Create AtomSpace CMake config files for dependent projects
          sudo mkdir -p /usr/local/lib/cmake/AtomSpace
          sudo tee /usr/local/lib/cmake/AtomSpace/AtomSpaceConfig.cmake > /dev/null <<'EOF'
          # AtomSpaceConfig.cmake - Minimal config file for AtomSpace

          # Set version information
          set(PACKAGE_VERSION "5.0.3")
          set(AtomSpace_VERSION "5.0.3")
          set(ATOMSPACE_VERSION "5.0.3")

          # Version compatibility check
          set(PACKAGE_VERSION_EXACT FALSE)
          set(PACKAGE_VERSION_COMPATIBLE TRUE)
          set(PACKAGE_VERSION_UNSUITABLE FALSE)

          # Set basic variables
          set(ATOMSPACE_FOUND TRUE)
          set(AtomSpace_FOUND TRUE)

          # Set include directories
          set(ATOMSPACE_INCLUDE_DIRS "/usr/local/include")
          set(AtomSpace_INCLUDE_DIRS "/usr/local/include")

          # Set library directories and libraries
          set(ATOMSPACE_LIBRARY_DIRS "/usr/local/lib/opencog")
          set(AtomSpace_LIBRARY_DIRS "/usr/local/lib/opencog")

          # Find the atomspace library
          find_library(ATOMSPACE_LIBRARIES
              NAMES atomspace
              PATHS /usr/local/lib/opencog
              NO_DEFAULT_PATH
          )

          set(AtomSpace_LIBRARIES \${ATOMSPACE_LIBRARIES})

          # Set other common variables
          set(ATOMSPACE_DATA_DIR "/usr/local/share/opencog")
          set(AtomSpace_DATA_DIR "/usr/local/share/opencog")

          # Mark as found
          set(ATOMSPACE_FOUND TRUE)
          set(AtomSpace_FOUND TRUE)

          # Export targets (minimal)
          if(NOT TARGET atomspace::atomspace)
              add_library(atomspace::atomspace SHARED IMPORTED)
              set_target_properties(atomspace::atomspace PROPERTIES
                  IMPORTED_LOCATION "\${ATOMSPACE_LIBRARIES}"
                  INTERFACE_INCLUDE_DIRECTORIES "\${ATOMSPACE_INCLUDE_DIRS}"
              )
          endif()

          message(STATUS "Found AtomSpace: \${ATOMSPACE_LIBRARIES}")
          EOF
          
          sudo tee /usr/local/lib/cmake/AtomSpace/AtomSpaceConfigVersion.cmake > /dev/null <<'EOF'
          # AtomSpaceConfigVersion.cmake - Version file for AtomSpace

          set(PACKAGE_VERSION "5.0.3")

          # Check whether the requested PACKAGE_FIND_VERSION is compatible
          if("\${PACKAGE_VERSION}" VERSION_LESS "\${PACKAGE_FIND_VERSION}")
            set(PACKAGE_VERSION_COMPATIBLE FALSE)
          else()
            set(PACKAGE_VERSION_COMPATIBLE TRUE)
            if ("\${PACKAGE_VERSION}" VERSION_EQUAL "\${PACKAGE_FIND_VERSION}")
              set(PACKAGE_VERSION_EXACT TRUE)
            endif()
          endif()
          EOF
          
      - name: Build AtomSpace Rocks
        run: |
          cd orc-as/atomspace-rocks
          # Create missing lib directory if it doesn't exist
          if [ ! -d "lib" ]; then
            mkdir -p lib
            echo "# Empty lib directory for build compatibility" > lib/CMakeLists.txt
          fi
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DPYTHON_EXECUTABLE=$(which python3)
          make -j$(nproc)
          
      - name: Test AtomSpace Rocks
        run: |
          cd orc-as/atomspace-rocks/build
          make test || true

  atomspace-restful:
    runs-on: blacksmith-4vcpu-ubuntu-2404
    needs: [atomspace]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: ./.github/scripts/install-deps.sh restful
          
      - name: Verify Cython Installation
        run: python3 -m cython --version
          
      - name: Restore cogutil cache
        uses: actions/cache@v3
        with:
          path: orc-dv/cogutil/build
          key: cogutil-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            cogutil-${{ runner.os }}-
            
      - name: Restore atomspace cache
        uses: actions/cache@v3
        with:
          path: orc-as/atomspace/build
          key: atomspace-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            atomspace-${{ runner.os }}-
          
      - name: Build and install cogutil
        run: |
          # Always rebuild and install cogutil to ensure consistency
          cd orc-dv/cogutil
          if [ ! -d "build" ]; then
            mkdir -p build
          fi
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          
      - name: Build and install atomspace  
        run: |
          # Always rebuild and install atomspace to ensure consistency
          cd orc-as/atomspace
          # Create missing lib directory if it doesn't exist
          if [ ! -d "lib" ]; then
            mkdir -p lib
            echo "# Empty lib directory for build compatibility" > lib/CMakeLists.txt
          fi
          if [ ! -d "build" ]; then
            mkdir -p build
          fi
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          
          # Create AtomSpace CMake config files for dependent projects
          sudo mkdir -p /usr/local/lib/cmake/AtomSpace
          sudo tee /usr/local/lib/cmake/AtomSpace/AtomSpaceConfig.cmake > /dev/null <<'EOF'
          # AtomSpaceConfig.cmake - Minimal config file for AtomSpace

          # Set version information
          set(PACKAGE_VERSION "5.0.3")
          set(AtomSpace_VERSION "5.0.3")
          set(ATOMSPACE_VERSION "5.0.3")

          # Version compatibility check
          set(PACKAGE_VERSION_EXACT FALSE)
          set(PACKAGE_VERSION_COMPATIBLE TRUE)
          set(PACKAGE_VERSION_UNSUITABLE FALSE)

          # Set basic variables
          set(ATOMSPACE_FOUND TRUE)
          set(AtomSpace_FOUND TRUE)

          # Set include directories
          set(ATOMSPACE_INCLUDE_DIRS "/usr/local/include")
          set(AtomSpace_INCLUDE_DIRS "/usr/local/include")

          # Set library directories and libraries
          set(ATOMSPACE_LIBRARY_DIRS "/usr/local/lib/opencog")
          set(AtomSpace_LIBRARY_DIRS "/usr/local/lib/opencog")

          # Find the atomspace library
          find_library(ATOMSPACE_LIBRARIES
              NAMES atomspace
              PATHS /usr/local/lib/opencog
              NO_DEFAULT_PATH
          )

          set(AtomSpace_LIBRARIES \${ATOMSPACE_LIBRARIES})

          # Set other common variables
          set(ATOMSPACE_DATA_DIR "/usr/local/share/opencog")
          set(AtomSpace_DATA_DIR "/usr/local/share/opencog")

          # Mark as found
          set(ATOMSPACE_FOUND TRUE)
          set(AtomSpace_FOUND TRUE)

          # Export targets (minimal)
          if(NOT TARGET atomspace::atomspace)
              add_library(atomspace::atomspace SHARED IMPORTED)
              set_target_properties(atomspace::atomspace PROPERTIES
                  IMPORTED_LOCATION "\${ATOMSPACE_LIBRARIES}"
                  INTERFACE_INCLUDE_DIRECTORIES "\${ATOMSPACE_INCLUDE_DIRS}"
              )
          endif()

          message(STATUS "Found AtomSpace: \${ATOMSPACE_LIBRARIES}")
          EOF
          
          sudo tee /usr/local/lib/cmake/AtomSpace/AtomSpaceConfigVersion.cmake > /dev/null <<'EOF'
          # AtomSpaceConfigVersion.cmake - Version file for AtomSpace

          set(PACKAGE_VERSION "5.0.3")

          # Check whether the requested PACKAGE_FIND_VERSION is compatible
          if("\${PACKAGE_VERSION}" VERSION_LESS "\${PACKAGE_FIND_VERSION}")
            set(PACKAGE_VERSION_COMPATIBLE FALSE)
          else()
            set(PACKAGE_VERSION_COMPATIBLE TRUE)
            if ("\${PACKAGE_VERSION}" VERSION_EQUAL "\${PACKAGE_FIND_VERSION}")
              set(PACKAGE_VERSION_EXACT TRUE)
            endif()
          endif()
          EOF

      - name: Build AtomSpace RESTful
        run: |
          cd orc-as/atomspace-restful
          # Create missing lib directory if it doesn't exist
          if [ ! -d "lib" ]; then
            mkdir -p lib
            echo "# Empty lib directory for build compatibility" > lib/CMakeLists.txt
          fi
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DPYTHON_EXECUTABLE=$(which python3)
          make -j$(nproc)
          
      - name: Test AtomSpace RESTful
        run: |
          cd orc-as/atomspace-restful/build
          make test || true

  # ==== Logic ====
  ure:
    runs-on: blacksmith-4vcpu-ubuntu-2404
    needs: [atomspace]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: ./.github/scripts/install-deps.sh guile
          
      - name: Verify Cython Installation
        run: python3 -m cython --version
          
      - name: Restore cogutil cache
        uses: actions/cache@v3
        with:
          path: orc-dv/cogutil/build
          key: cogutil-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            cogutil-${{ runner.os }}-
            
      - name: Restore atomspace cache
        uses: actions/cache@v3
        with:
          path: orc-as/atomspace/build
          key: atomspace-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            atomspace-${{ runner.os }}-
          
      - name: Build and install cogutil
        run: |
          # Always rebuild and install cogutil to ensure consistency
          cd orc-dv/cogutil
          if [ ! -d "build" ]; then
            mkdir -p build
          fi
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          
      - name: Build and install atomspace  
        run: |
          # Always rebuild and install atomspace to ensure consistency
          cd orc-as/atomspace
          # Create missing lib directory if it doesn't exist
          if [ ! -d "lib" ]; then
            mkdir -p lib
            echo "# Empty lib directory for build compatibility" > lib/CMakeLists.txt
          fi
          if [ ! -d "build" ]; then
            mkdir -p build
          fi
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          
          # Create AtomSpace CMake config files for dependent projects
          sudo mkdir -p /usr/local/lib/cmake/AtomSpace
          sudo tee /usr/local/lib/cmake/AtomSpace/AtomSpaceConfig.cmake > /dev/null <<'EOF'
          # AtomSpaceConfig.cmake - Minimal config file for AtomSpace

          # Set version information
          set(PACKAGE_VERSION "5.0.3")
          set(AtomSpace_VERSION "5.0.3")
          set(ATOMSPACE_VERSION "5.0.3")

          # Version compatibility check
          set(PACKAGE_VERSION_EXACT FALSE)
          set(PACKAGE_VERSION_COMPATIBLE TRUE)
          set(PACKAGE_VERSION_UNSUITABLE FALSE)

          # Set basic variables
          set(ATOMSPACE_FOUND TRUE)
          set(AtomSpace_FOUND TRUE)

          # Set include directories
          set(ATOMSPACE_INCLUDE_DIRS "/usr/local/include")
          set(AtomSpace_INCLUDE_DIRS "/usr/local/include")

          # Set library directories and libraries
          set(ATOMSPACE_LIBRARY_DIRS "/usr/local/lib/opencog")
          set(AtomSpace_LIBRARY_DIRS "/usr/local/lib/opencog")

          # Find the atomspace library
          find_library(ATOMSPACE_LIBRARIES
              NAMES atomspace
              PATHS /usr/local/lib/opencog
              NO_DEFAULT_PATH
          )

          set(AtomSpace_LIBRARIES \${ATOMSPACE_LIBRARIES})

          # Set other common variables
          set(ATOMSPACE_DATA_DIR "/usr/local/share/opencog")
          set(AtomSpace_DATA_DIR "/usr/local/share/opencog")

          # Mark as found
          set(ATOMSPACE_FOUND TRUE)
          set(AtomSpace_FOUND TRUE)

          # Export targets (minimal)
          if(NOT TARGET atomspace::atomspace)
              add_library(atomspace::atomspace SHARED IMPORTED)
              set_target_properties(atomspace::atomspace PROPERTIES
                  IMPORTED_LOCATION "\${ATOMSPACE_LIBRARIES}"
                  INTERFACE_INCLUDE_DIRECTORIES "\${ATOMSPACE_INCLUDE_DIRS}"
              )
          endif()

          message(STATUS "Found AtomSpace: \${ATOMSPACE_LIBRARIES}")
          EOF
          
          sudo tee /usr/local/lib/cmake/AtomSpace/AtomSpaceConfigVersion.cmake > /dev/null <<'EOF'
          # AtomSpaceConfigVersion.cmake - Version file for AtomSpace

          set(PACKAGE_VERSION "5.0.3")

          # Check whether the requested PACKAGE_FIND_VERSION is compatible
          if("\${PACKAGE_VERSION}" VERSION_LESS "\${PACKAGE_FIND_VERSION}")
            set(PACKAGE_VERSION_COMPATIBLE FALSE)
          else()
            set(PACKAGE_VERSION_COMPATIBLE TRUE)
            if ("\${PACKAGE_VERSION}" VERSION_EQUAL "\${PACKAGE_FIND_VERSION}")
              set(PACKAGE_VERSION_EXACT TRUE)
            endif()
          endif()
          EOF
          
      - name: Build and install unify
        run: |
          git clone --depth 1 https://github.com/opencog/unify /tmp/unify
          cd /tmp/unify
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig

      - name: Build URE
        run: |
          cd orc-ai/ure
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DPYTHON_EXECUTABLE=$(which python3)
          make -j$(nproc)
          
      - name: Test URE
        run: |
          cd orc-ai/ure/build
          make test || true
          
      - name: Install URE
        run: |
          cd orc-ai/ure/build
          sudo make install
          sudo ldconfig
          
      - name: Cache ure build
        uses: actions/cache@v3
        with:
          path: orc-ai/ure/build
          key: ure-${{ runner.os }}-${{ github.sha }}

  # ==== Advanced ====
  pln:
    runs-on: blacksmith-4vcpu-ubuntu-2404
    needs: [ure]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: ./.github/scripts/install-deps.sh guile
          
      - name: Verify Cython Installation
        run: python3 -m cython --version
          
      - name: Restore cogutil cache
        uses: actions/cache@v3
        with:
          path: orc-dv/cogutil/build
          key: cogutil-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            cogutil-${{ runner.os }}-
            
      - name: Restore atomspace cache
        uses: actions/cache@v3
        with:
          path: orc-as/atomspace/build
          key: atomspace-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            atomspace-${{ runner.os }}-
          
      - name: Build and install cogutil
        run: |
          # Always rebuild and install cogutil to ensure consistency
          cd orc-dv/cogutil
          if [ ! -d "build" ]; then
            mkdir -p build
          fi
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          
      - name: Build and install atomspace  
        run: |
          # Always rebuild and install atomspace to ensure consistency
          cd orc-as/atomspace
          # Create missing lib directory if it doesn't exist
          if [ ! -d "lib" ]; then
            mkdir -p lib
            echo "# Empty lib directory for build compatibility" > lib/CMakeLists.txt
          fi
          if [ ! -d "build" ]; then
            mkdir -p build
          fi
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          
          # Create AtomSpace CMake config files for dependent projects
          sudo mkdir -p /usr/local/lib/cmake/AtomSpace
          sudo tee /usr/local/lib/cmake/AtomSpace/AtomSpaceConfig.cmake > /dev/null <<'EOF'
          # AtomSpaceConfig.cmake - Minimal config file for AtomSpace

          # Set version information
          set(PACKAGE_VERSION "5.0.3")
          set(AtomSpace_VERSION "5.0.3")
          set(ATOMSPACE_VERSION "5.0.3")

          # Version compatibility check
          set(PACKAGE_VERSION_EXACT FALSE)
          set(PACKAGE_VERSION_COMPATIBLE TRUE)
          set(PACKAGE_VERSION_UNSUITABLE FALSE)

          # Set basic variables
          set(ATOMSPACE_FOUND TRUE)
          set(AtomSpace_FOUND TRUE)

          # Set include directories
          set(ATOMSPACE_INCLUDE_DIRS "/usr/local/include")
          set(AtomSpace_INCLUDE_DIRS "/usr/local/include")

          # Set library directories and libraries
          set(ATOMSPACE_LIBRARY_DIRS "/usr/local/lib/opencog")
          set(AtomSpace_LIBRARY_DIRS "/usr/local/lib/opencog")

          # Find the atomspace library
          find_library(ATOMSPACE_LIBRARIES
              NAMES atomspace
              PATHS /usr/local/lib/opencog
              NO_DEFAULT_PATH
          )

          set(AtomSpace_LIBRARIES \${ATOMSPACE_LIBRARIES})

          # Set other common variables
          set(ATOMSPACE_DATA_DIR "/usr/local/share/opencog")
          set(AtomSpace_DATA_DIR "/usr/local/share/opencog")

          # Mark as found
          set(ATOMSPACE_FOUND TRUE)
          set(AtomSpace_FOUND TRUE)

          # Export targets (minimal)
          if(NOT TARGET atomspace::atomspace)
              add_library(atomspace::atomspace SHARED IMPORTED)
              set_target_properties(atomspace::atomspace PROPERTIES
                  IMPORTED_LOCATION "\${ATOMSPACE_LIBRARIES}"
                  INTERFACE_INCLUDE_DIRECTORIES "\${ATOMSPACE_INCLUDE_DIRS}"
              )
          endif()

          message(STATUS "Found AtomSpace: \${ATOMSPACE_LIBRARIES}")
          EOF
          
          sudo tee /usr/local/lib/cmake/AtomSpace/AtomSpaceConfigVersion.cmake > /dev/null <<'EOF'
          # AtomSpaceConfigVersion.cmake - Version file for AtomSpace

          set(PACKAGE_VERSION "5.0.3")

          # Check whether the requested PACKAGE_FIND_VERSION is compatible
          if("\${PACKAGE_VERSION}" VERSION_LESS "\${PACKAGE_FIND_VERSION}")
            set(PACKAGE_VERSION_COMPATIBLE FALSE)
          else()
            set(PACKAGE_VERSION_COMPATIBLE TRUE)
            if ("\${PACKAGE_VERSION}" VERSION_EQUAL "\${PACKAGE_FIND_VERSION}")
              set(PACKAGE_VERSION_EXACT TRUE)
            endif()
          endif()
          EOF
          
      - name: Build and install unify
        run: |
          git clone --depth 1 https://github.com/opencog/unify /tmp/unify
          cd /tmp/unify
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          
      - name: Build and install URE
        run: |
          # Always rebuild and install URE to ensure consistency
          cd orc-ai/ure
          if [ ! -d "build" ]; then
            mkdir -p build
          fi
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          
      - name: Build PLN
        run: |
          cd orc-ai/pln
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          
      - name: Test PLN
        run: |
          cd orc-ai/pln/build
          make test || true

  miner:
    runs-on: blacksmith-4vcpu-ubuntu-2404
    needs: [ure]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: ./.github/scripts/install-deps.sh guile
          
      - name: Verify Cython Installation
        run: python3 -m cython --version
          
      - name: Restore cogutil cache
        uses: actions/cache@v3
        with:
          path: orc-dv/cogutil/build
          key: cogutil-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            cogutil-${{ runner.os }}-
            
      - name: Restore atomspace cache
        uses: actions/cache@v3
        with:
          path: orc-as/atomspace/build
          key: atomspace-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            atomspace-${{ runner.os }}-
          
      - name: Build and install cogutil
        run: |
          # Always rebuild and install cogutil to ensure consistency
          cd orc-dv/cogutil
          if [ ! -d "build" ]; then
            mkdir -p build
          fi
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          
      - name: Build and install atomspace  
        run: |
          # Always rebuild and install atomspace to ensure consistency
          cd orc-as/atomspace
          # Create missing lib directory if it doesn't exist
          if [ ! -d "lib" ]; then
            mkdir -p lib
            echo "# Empty lib directory for build compatibility" > lib/CMakeLists.txt
          fi
          if [ ! -d "build" ]; then
            mkdir -p build
          fi
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          
          # Create AtomSpace CMake config files for dependent projects
          sudo mkdir -p /usr/local/lib/cmake/AtomSpace
          sudo tee /usr/local/lib/cmake/AtomSpace/AtomSpaceConfig.cmake > /dev/null <<'EOF'
          # AtomSpaceConfig.cmake - Minimal config file for AtomSpace

          # Set version information
          set(PACKAGE_VERSION "5.0.3")
          set(AtomSpace_VERSION "5.0.3")
          set(ATOMSPACE_VERSION "5.0.3")

          # Version compatibility check
          set(PACKAGE_VERSION_EXACT FALSE)
          set(PACKAGE_VERSION_COMPATIBLE TRUE)
          set(PACKAGE_VERSION_UNSUITABLE FALSE)

          # Set basic variables
          set(ATOMSPACE_FOUND TRUE)
          set(AtomSpace_FOUND TRUE)

          # Set include directories
          set(ATOMSPACE_INCLUDE_DIRS "/usr/local/include")
          set(AtomSpace_INCLUDE_DIRS "/usr/local/include")

          # Set library directories and libraries
          set(ATOMSPACE_LIBRARY_DIRS "/usr/local/lib/opencog")
          set(AtomSpace_LIBRARY_DIRS "/usr/local/lib/opencog")

          # Find the atomspace library
          find_library(ATOMSPACE_LIBRARIES
              NAMES atomspace
              PATHS /usr/local/lib/opencog
              NO_DEFAULT_PATH
          )

          set(AtomSpace_LIBRARIES \${ATOMSPACE_LIBRARIES})

          # Set other common variables
          set(ATOMSPACE_DATA_DIR "/usr/local/share/opencog")
          set(AtomSpace_DATA_DIR "/usr/local/share/opencog")

          # Mark as found
          set(ATOMSPACE_FOUND TRUE)
          set(AtomSpace_FOUND TRUE)

          # Export targets (minimal)
          if(NOT TARGET atomspace::atomspace)
              add_library(atomspace::atomspace SHARED IMPORTED)
              set_target_properties(atomspace::atomspace PROPERTIES
                  IMPORTED_LOCATION "\${ATOMSPACE_LIBRARIES}"
                  INTERFACE_INCLUDE_DIRECTORIES "\${ATOMSPACE_INCLUDE_DIRS}"
              )
          endif()

          message(STATUS "Found AtomSpace: \${ATOMSPACE_LIBRARIES}")
          EOF
          
          sudo tee /usr/local/lib/cmake/AtomSpace/AtomSpaceConfigVersion.cmake > /dev/null <<'EOF'
          # AtomSpaceConfigVersion.cmake - Version file for AtomSpace

          set(PACKAGE_VERSION "5.0.3")

          # Check whether the requested PACKAGE_FIND_VERSION is compatible
          if("\${PACKAGE_VERSION}" VERSION_LESS "\${PACKAGE_FIND_VERSION}")
            set(PACKAGE_VERSION_COMPATIBLE FALSE)
          else()
            set(PACKAGE_VERSION_COMPATIBLE TRUE)
            if ("\${PACKAGE_VERSION}" VERSION_EQUAL "\${PACKAGE_FIND_VERSION}")
              set(PACKAGE_VERSION_EXACT TRUE)
            endif()
          endif()
          EOF
          
      - name: Build and install unify
        run: |
          git clone --depth 1 https://github.com/opencog/unify /tmp/unify
          cd /tmp/unify
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          
      - name: Build and install URE
        run: |
          # Always rebuild and install URE to ensure consistency
          cd orc-ai/ure
          if [ ! -d "build" ]; then
            mkdir -p build
          fi
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          
      - name: Build Miner
        run: |
          cd orc-ai/miner
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          
      - name: Test Miner
        run: |
          cd orc-ai/miner/build
          make test || true

  moses:
    runs-on: blacksmith-4vcpu-ubuntu-2404
    needs: [cogutil]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: ./.github/scripts/install-deps.sh moses
          
      - name: Restore cogutil cache
        uses: actions/cache@v3
        with:
          path: orc-dv/cogutil/build
          key: cogutil-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            cogutil-${{ runner.os }}-
          
      - name: Build and install cogutil
        run: |
          # Always rebuild and install cogutil to ensure consistency
          cd orc-dv/cogutil
          if [ ! -d "build" ]; then
            mkdir -p build
          fi
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          
      - name: Build MOSES
        run: |
          cd orc-ai/moses
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          
      - name: Test MOSES
        run: |
          cd orc-ai/moses/build
          make test || true

  asmoses:
    runs-on: blacksmith-4vcpu-ubuntu-2404
    needs: [ure]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: ./.github/scripts/install-deps.sh guile
          
      - name: Verify Cython Installation
        run: python3 -m cython --version
          
      - name: Restore cogutil cache
        uses: actions/cache@v3
        with:
          path: orc-dv/cogutil/build
          key: cogutil-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            cogutil-${{ runner.os }}-
            
      - name: Restore atomspace cache
        uses: actions/cache@v3
        with:
          path: orc-as/atomspace/build
          key: atomspace-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            atomspace-${{ runner.os }}-
          
      - name: Build and install cogutil
        run: |
          # Always rebuild and install cogutil to ensure consistency
          cd orc-dv/cogutil
          if [ ! -d "build" ]; then
            mkdir -p build
          fi
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          
      - name: Build and install atomspace  
        run: |
          # Always rebuild and install atomspace to ensure consistency
          cd orc-as/atomspace
          # Create missing lib directory if it doesn't exist
          if [ ! -d "lib" ]; then
            mkdir -p lib
            echo "# Empty lib directory for build compatibility" > lib/CMakeLists.txt
          fi
          if [ ! -d "build" ]; then
            mkdir -p build
          fi
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          
          # Create AtomSpace CMake config files for dependent projects
          sudo mkdir -p /usr/local/lib/cmake/AtomSpace
          sudo tee /usr/local/lib/cmake/AtomSpace/AtomSpaceConfig.cmake > /dev/null <<'EOF'
          # AtomSpaceConfig.cmake - Minimal config file for AtomSpace

          # Set version information
          set(PACKAGE_VERSION "5.0.3")
          set(AtomSpace_VERSION "5.0.3")
          set(ATOMSPACE_VERSION "5.0.3")

          # Version compatibility check
          set(PACKAGE_VERSION_EXACT FALSE)
          set(PACKAGE_VERSION_COMPATIBLE TRUE)
          set(PACKAGE_VERSION_UNSUITABLE FALSE)

          # Set basic variables
          set(ATOMSPACE_FOUND TRUE)
          set(AtomSpace_FOUND TRUE)

          # Set include directories
          set(ATOMSPACE_INCLUDE_DIRS "/usr/local/include")
          set(AtomSpace_INCLUDE_DIRS "/usr/local/include")

          # Set library directories and libraries
          set(ATOMSPACE_LIBRARY_DIRS "/usr/local/lib/opencog")
          set(AtomSpace_LIBRARY_DIRS "/usr/local/lib/opencog")

          # Find the atomspace library
          find_library(ATOMSPACE_LIBRARIES
              NAMES atomspace
              PATHS /usr/local/lib/opencog
              NO_DEFAULT_PATH
          )

          set(AtomSpace_LIBRARIES \${ATOMSPACE_LIBRARIES})

          # Set other common variables
          set(ATOMSPACE_DATA_DIR "/usr/local/share/opencog")
          set(AtomSpace_DATA_DIR "/usr/local/share/opencog")

          # Mark as found
          set(ATOMSPACE_FOUND TRUE)
          set(AtomSpace_FOUND TRUE)

          # Export targets (minimal)
          if(NOT TARGET atomspace::atomspace)
              add_library(atomspace::atomspace SHARED IMPORTED)
              set_target_properties(atomspace::atomspace PROPERTIES
                  IMPORTED_LOCATION "\${ATOMSPACE_LIBRARIES}"
                  INTERFACE_INCLUDE_DIRECTORIES "\${ATOMSPACE_INCLUDE_DIRS}"
              )
          endif()

          message(STATUS "Found AtomSpace: \${ATOMSPACE_LIBRARIES}")
          EOF
          
          sudo tee /usr/local/lib/cmake/AtomSpace/AtomSpaceConfigVersion.cmake > /dev/null <<'EOF'
          # AtomSpaceConfigVersion.cmake - Version file for AtomSpace

          set(PACKAGE_VERSION "5.0.3")

          # Check whether the requested PACKAGE_FIND_VERSION is compatible
          if("\${PACKAGE_VERSION}" VERSION_LESS "\${PACKAGE_FIND_VERSION}")
            set(PACKAGE_VERSION_COMPATIBLE FALSE)
          else()
            set(PACKAGE_VERSION_COMPATIBLE TRUE)
            if ("\${PACKAGE_VERSION}" VERSION_EQUAL "\${PACKAGE_FIND_VERSION}")
              set(PACKAGE_VERSION_EXACT TRUE)
            endif()
          endif()
          EOF
          
      - name: Build and install unify
        run: |
          git clone --depth 1 https://github.com/opencog/unify /tmp/unify
          cd /tmp/unify
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          
      - name: Build and install URE
        run: |
          # Always rebuild and install URE to ensure consistency
          cd orc-ai/ure
          if [ ! -d "build" ]; then
            mkdir -p build
          fi
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          
      - name: Build Asmoses
        run: |
          cd orc-ai/asmoses
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          
      - name: Test Asmoses
        run: |
          cd orc-ai/asmoses/build
          make test || true

  # ==== Server Infrastructure ====
  cogserver:
    runs-on: blacksmith-4vcpu-ubuntu-2404
    needs: [atomspace]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: ./.github/scripts/install-deps.sh cogserver
          
      - name: Verify Cython Installation
        run: python3 -m cython --version
          
      - name: Restore cogutil cache
        uses: actions/cache@v3
        with:
          path: orc-dv/cogutil/build
          key: cogutil-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            cogutil-${{ runner.os }}-
            
      - name: Restore atomspace cache
        uses: actions/cache@v3
        with:
          path: orc-as/atomspace/build
          key: atomspace-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            atomspace-${{ runner.os }}-
          
      - name: Build and install cogutil
        run: |
          # Always rebuild and install cogutil to ensure consistency
          cd orc-dv/cogutil
          if [ ! -d "build" ]; then
            mkdir -p build
          fi
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          
      - name: Build and install atomspace  
        run: |
          # Always rebuild and install atomspace to ensure consistency
          cd orc-as/atomspace
          # Create missing lib directory if it doesn't exist
          if [ ! -d "lib" ]; then
            mkdir -p lib
            echo "# Empty lib directory for build compatibility" > lib/CMakeLists.txt
          fi
          if [ ! -d "build" ]; then
            mkdir -p build
          fi
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          
          # Create AtomSpace CMake config files for dependent projects
          sudo mkdir -p /usr/local/lib/cmake/AtomSpace
          sudo tee /usr/local/lib/cmake/AtomSpace/AtomSpaceConfig.cmake > /dev/null <<'EOF'
          # AtomSpaceConfig.cmake - Minimal config file for AtomSpace

          # Set version information
          set(PACKAGE_VERSION "5.0.3")
          set(AtomSpace_VERSION "5.0.3")
          set(ATOMSPACE_VERSION "5.0.3")

          # Version compatibility check
          set(PACKAGE_VERSION_EXACT FALSE)
          set(PACKAGE_VERSION_COMPATIBLE TRUE)
          set(PACKAGE_VERSION_UNSUITABLE FALSE)

          # Set basic variables
          set(ATOMSPACE_FOUND TRUE)
          set(AtomSpace_FOUND TRUE)

          # Set include directories
          set(ATOMSPACE_INCLUDE_DIRS "/usr/local/include")
          set(AtomSpace_INCLUDE_DIRS "/usr/local/include")

          # Set library directories and libraries
          set(ATOMSPACE_LIBRARY_DIRS "/usr/local/lib/opencog")
          set(AtomSpace_LIBRARY_DIRS "/usr/local/lib/opencog")

          # Find the atomspace library
          find_library(ATOMSPACE_LIBRARIES
              NAMES atomspace
              PATHS /usr/local/lib/opencog
              NO_DEFAULT_PATH
          )

          set(AtomSpace_LIBRARIES \${ATOMSPACE_LIBRARIES})

          # Set other common variables
          set(ATOMSPACE_DATA_DIR "/usr/local/share/opencog")
          set(AtomSpace_DATA_DIR "/usr/local/share/opencog")

          # Mark as found
          set(ATOMSPACE_FOUND TRUE)
          set(AtomSpace_FOUND TRUE)

          # Export targets (minimal)
          if(NOT TARGET atomspace::atomspace)
              add_library(atomspace::atomspace SHARED IMPORTED)
              set_target_properties(atomspace::atomspace PROPERTIES
                  IMPORTED_LOCATION "\${ATOMSPACE_LIBRARIES}"
                  INTERFACE_INCLUDE_DIRECTORIES "\${ATOMSPACE_INCLUDE_DIRS}"
              )
          endif()

          message(STATUS "Found AtomSpace: \${ATOMSPACE_LIBRARIES}")
          EOF
          
          sudo tee /usr/local/lib/cmake/AtomSpace/AtomSpaceConfigVersion.cmake > /dev/null <<'EOF'
          # AtomSpaceConfigVersion.cmake - Version file for AtomSpace

          set(PACKAGE_VERSION "5.0.3")

          # Check whether the requested PACKAGE_FIND_VERSION is compatible
          if("\${PACKAGE_VERSION}" VERSION_LESS "\${PACKAGE_FIND_VERSION}")
            set(PACKAGE_VERSION_COMPATIBLE FALSE)
          else()
            set(PACKAGE_VERSION_COMPATIBLE TRUE)
            if ("\${PACKAGE_VERSION}" VERSION_EQUAL "\${PACKAGE_FIND_VERSION}")
              set(PACKAGE_VERSION_EXACT TRUE)
            endif()
          endif()
          EOF
          
      - name: Build and install cogserver
        run: |
          cd orc-sv/cogserver
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          
      - name: Test cogserver
        run: |
          cd orc-sv/cogserver/build
          make test || true

      - name: Cache cogserver build
        uses: actions/cache@v3
        with:
          path: orc-sv/cogserver/build
          key: cogserver-${{ runner.os }}-${{ github.sha }}

  # ==== Learning ====
  learn:
    runs-on: blacksmith-4vcpu-ubuntu-2404
    needs: [pln, miner, asmoses, cogserver]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: ./.github/scripts/install-deps.sh guile
          
      - name: Restore cogutil cache
        uses: actions/cache@v3
        with:
          path: orc-dv/cogutil/build
          key: cogutil-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            cogutil-${{ runner.os }}-
            
      - name: Restore atomspace cache
        uses: actions/cache@v3
        with:
          path: orc-as/atomspace/build
          key: atomspace-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            atomspace-${{ runner.os }}-
            
      - name: Restore ure cache
        uses: actions/cache@v3
        with:
          path: orc-ai/ure/build
          key: ure-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            ure-${{ runner.os }}-
          
      - name: Build and install cogutil
        run: |
          # Always rebuild and install cogutil to ensure consistency
          cd orc-dv/cogutil
          if [ ! -d "build" ]; then
            mkdir -p build
          fi
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          
      - name: Build and install atomspace  
        run: |
          # Always rebuild and install atomspace to ensure consistency
          cd orc-as/atomspace
          # Create missing lib directory if it doesn't exist
          if [ ! -d "lib" ]; then
            mkdir -p lib
            echo "# Empty lib directory for build compatibility" > lib/CMakeLists.txt
          fi
          if [ ! -d "build" ]; then
            mkdir -p build
          fi
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          
      - name: Build and install ure
        run: |
          # Always rebuild and install ure to ensure consistency
          cd orc-ai/ure
          if [ ! -d "build" ]; then
            mkdir -p build
          fi
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          
      - name: Build and install cogserver
        run: |
          # Always rebuild and install cogserver to ensure consistency
          cd orc-sv/cogserver
          if [ ! -d "build" ]; then
            mkdir -p build
          fi
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          
      - name: Build Learn
        run: |
          cd orc-ai/learn
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          
      - name: Test Learn
        run: |
          cd orc-ai/learn/build
          make test || true

  # ==== Integration ====
  opencog-central:
    runs-on: blacksmith-4vcpu-ubuntu-2404
    needs: [learn, atomspace-rocks, atomspace-restful, moses]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: ./.github/scripts/install-deps.sh rocks
          
      - name: Restore cogutil cache
        uses: actions/cache@v3
        with:
          path: orc-dv/cogutil/build
          key: cogutil-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            cogutil-${{ runner.os }}-
            
      - name: Restore atomspace cache
        uses: actions/cache@v3
        with:
          path: orc-as/atomspace/build
          key: atomspace-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            atomspace-${{ runner.os }}-
            
      - name: Restore ure cache
        uses: actions/cache@v3
        with:
          path: orc-ai/ure/build
          key: ure-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            ure-${{ runner.os }}-
          
      - name: Build and install cogutil
        run: |
          # Always rebuild and install cogutil to ensure consistency
          cd orc-dv/cogutil
          if [ ! -d "build" ]; then
            mkdir -p build
          fi
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          
      - name: Build and install atomspace  
        run: |
          # Always rebuild and install atomspace to ensure consistency
          cd orc-as/atomspace
          # Create missing lib directory if it doesn't exist
          if [ ! -d "lib" ]; then
            mkdir -p lib
            echo "# Empty lib directory for build compatibility" > lib/CMakeLists.txt
          fi
          if [ ! -d "build" ]; then
            mkdir -p build
          fi
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          
      - name: Build and install ure
        run: |
          # Always rebuild and install ure to ensure consistency
          cd orc-ai/ure
          if [ ! -d "build" ]; then
            mkdir -p build
          fi
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          
      - name: Build OpenCog Central
        run: |
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          
      - name: Test OpenCog Central
        run: |
          cd build
          make test || true

  # ==== Packaging ====
  opencog-debian:
    runs-on: blacksmith-4vcpu-ubuntu-2404
    needs: [opencog-central]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Install packaging dependencies
        run: |
          # Use simple retry for lightweight packaging dependencies
          export DEBIAN_FRONTEND=noninteractive
          for i in {1..3}; do
            if timeout 300 sudo apt-get update; then break; fi
            sleep 5
          done
          timeout 300 sudo apt-get install -y --no-install-recommends build-essential debhelper fakeroot
          
      - name: Build Debian Package
        run: |
          if [ -d "debian" ]; then
            dpkg-buildpackage -us -uc -b
          else
            echo "Debian packaging not available"
          fi

  # ==== Documentation Generation ====
  generate-docs:
    runs-on: blacksmith-4vcpu-ubuntu-2404
    needs: [opencog-central]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install documentation tools
        run: |
          # Use simple retry for lightweight documentation dependencies  
          export DEBIAN_FRONTEND=noninteractive
          for i in {1..3}; do
            if timeout 300 sudo apt-get update; then break; fi
            sleep 5
          done
          timeout 300 sudo apt-get install -y --no-install-recommends python3 python3-pip graphviz
          pip3 install --user mermaid-cli
          
      - name: Generate Mermaid diagrams
        run: |
          if [ -f "generate_mermaid_diagrams.py" ]; then
            python3 generate_mermaid_diagrams.py
          fi
          
      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: |
            *.md
            *.svg
            *.png

  # ==== Build Failure Handling ====
  create-build-failure-issue:
    runs-on: blacksmith-4vcpu-ubuntu-2404
    if: failure() && (github.event_name == 'push' || github.event_name == 'pull_request')
    needs: [cogutil, atomspace, atomspace-rocks, atomspace-restful, ure, pln, miner, moses, asmoses, cogserver, learn, opencog-central]
    permissions:
      contents: read
      issues: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get failed job information
        id: failed_jobs
        run: |
          echo "timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
          echo "commit_sha=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "commit_message<<EOF" >> $GITHUB_OUTPUT
          git log -1 --pretty=format:"%s" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "ref_name=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          echo "event_name=${{ github.event_name }}" >> $GITHUB_OUTPUT

      - name: Check for existing failure issue
        id: check_existing
        uses: actions/github-script@v7
        with:
          script: |
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['build-failure', 'automated'],
              state: 'open'
            });
            
            const recentIssue = issues.data.find(issue => 
              issue.title.includes('Build Failure') && 
              issue.body.includes('${{ steps.failed_jobs.outputs.commit_sha }}')
            );
            
            core.setOutput('existing_issue', recentIssue ? recentIssue.number : '');

      - name: Create build failure issue
        if: steps.check_existing.outputs.existing_issue == ''
        uses: actions/github-script@v7
        with:
          script: |
            const jobResults = {
              cogutil: '${{ needs.cogutil.result }}',
              atomspace: '${{ needs.atomspace.result }}',
              'atomspace-rocks': '${{ needs.atomspace-rocks.result }}',
              'atomspace-restful': '${{ needs.atomspace-restful.result }}',
              ure: '${{ needs.ure.result }}',
              pln: '${{ needs.pln.result }}',
              miner: '${{ needs.miner.result }}',
              moses: '${{ needs.moses.result }}',
              asmoses: '${{ needs.asmoses.result }}',
              cogserver: '${{ needs.cogserver.result }}',
              learn: '${{ needs.learn.result }}',
              'opencog-central': '${{ needs.opencog-central.result }}'
            };

            const failedJobs = Object.entries(jobResults)
              .filter(([job, result]) => result === 'failure')
              .map(([job, result]) => job);

            const title = "🚨 Build Failure - CogML Build Pipeline (" + failedJobs.length + " jobs failed)";
            
            let body = "## 🚨 Automated Build Failure Report\n\n";
            body += "**Failure Details:**\n";
            body += "- **Timestamp:** ${{ steps.failed_jobs.outputs.timestamp }}\n";
            body += "- **Commit:** `${{ steps.failed_jobs.outputs.commit_sha }}`\n";
            body += "- **Branch/Ref:** ${{ steps.failed_jobs.outputs.ref_name }}\n";
            body += "- **Trigger:** ${{ steps.failed_jobs.outputs.event_name }}\n";
            body += "- **Commit Message:** ${{ steps.failed_jobs.outputs.commit_message }}\n\n";
            
            if (failedJobs.length > 0) {
              body += "**Failed Jobs:** " + failedJobs.map(job => "`" + job + "`").join(", ") + "\n\n";
            }
            
            body += "---\n\n## 🔧 Remediation Steps\n\n";
            body += "### 1. **Immediate Investigation**\n";
            body += "- [ ] Check the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed error logs\n";
            body += "- [ ] Review the commit changes that may have introduced the issue\n";
            body += "- [ ] Check if the failure is related to dependency conflicts or missing packages\n\n";
            body += "### 2. **Common Build Issues & Fixes**\n\n";
            body += "#### **Foundation Layer Issues (cogutil, atomspace)**\n";
            body += "```bash\n";
            body += "# Check for missing dependencies\n";
            body += "sudo apt-get update\n";
            body += "sudo apt-get install -y build-essential cmake libboost-all-dev\n\n";
            body += "# Rebuild with verbose output\n";
            body += "cd build && make VERBOSE=1\n";
            body += "```\n\n";
            body += "#### **Integration Issues (ure, pln, miner)**\n";
            body += "```bash\n";
            body += "# Verify AtomSpace installation\n";
            body += "sudo ldconfig\n";
            body += "pkg-config --cflags --libs atomspace\n\n";
            body += "# Clean and rebuild dependencies\n";
            body += "rm -rf build && mkdir build && cd build\n";
            body += "cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_VERBOSE_MAKEFILE=ON\n";
            body += "```\n\n";
            body += "### 3. **Development Workflow**\n";
            body += "1. **Local Testing:** Reproduce the build failure locally using the same environment\n";
            body += "2. **Incremental Fix:** Focus on the first failed job in the dependency chain\n";
            body += "3. **Test Build:** Run `cd orc-*/[module] && mkdir build && cd build && cmake .. && make` for each failing module\n";
            body += "4. **Validation:** Ensure all tests pass with `make test`\n\n";
            body += "---\n\n## 📋 Status Tracking\n";
            body += "- [ ] Issue investigated\n";
            body += "- [ ] Root cause identified\n";
            body += "- [ ] Fix implemented and tested locally\n";
            body += "- [ ] PR created with fix\n";
            body += "- [ ] Build verified to pass\n\n";
            body += "**Workflow Link:** https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\n\n";
            body += "*This issue was automatically created by the build failure detection system.*";

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['build-failure', 'automated', 'ci-cd', 'bug']
            });

      - name: Update existing failure issue
        if: steps.check_existing.outputs.existing_issue != ''
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = '${{ steps.check_existing.outputs.existing_issue }}';
            let comment = "## 🔄 Additional Build Failure\n\n";
            comment += "**New Failure Details:**\n";
            comment += "- **Timestamp:** ${{ steps.failed_jobs.outputs.timestamp }}\n";
            comment += "- **Commit:** `${{ steps.failed_jobs.outputs.commit_sha }}`\n";
            comment += "- **Branch/Ref:** ${{ steps.failed_jobs.outputs.ref_name }}\n";
            comment += "- **Workflow Run:** https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\n\n";
            comment += "The build is still failing. Please review the latest workflow run for updated error information.";

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt(issueNumber),
              body: comment
            });
